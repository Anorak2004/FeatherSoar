<!-- 
  History页面 - 显示历史运动记录列表
-->
<template>
  <div class="history-container">
    <div class="history-header">
      <text class="history-title">历史记录</text>
    </div>
    
    <list class="history-list">
      <list-item type="history-item" for="(index, item) in historyItems" class="history-item">
        <div class="item-content" onclick="viewDetail(item.id)">
          <div class="item-header">
            <text class="item-date">{{ formatDate(item.date) }}</text>
            <text class="item-duration">{{ formatDuration(item.duration) }}</text>
          </div>
          <div class="item-stats">
            <div class="stat-row">
              <text class="stat-name">消耗卡路里</text>
              <text class="stat-value">{{ item.calories }}千卡</text>
            </div>
            <div class="stat-row">
              <text class="stat-name">挥拍次数</text>
              <text class="stat-value">{{ item.strokes }}次</text>
            </div>
            <div class="stat-row">
              <text class="stat-name">平均心率</text>
              <text class="stat-value">{{ item.avgHeartRate }}bpm</text>
            </div>
          </div>
        </div>
      </list-item>
      
      <list-item type="loading" if="{{ isLoading }}" class="loading-item">
        <div class="loading-indicator">
          <text>加载中...</text>
        </div>
      </list-item>
      
      <list-item type="no-data" if="{{ historyItems.length === 0 && !isLoading }}" class="empty-item">
        <div class="empty-state">
          <text class="empty-text">暂无历史记录</text>
        </div>
      </list-item>
    </list>
  </div>
</template>

<script>
  import { getHistoryList } from '../../../packages/service/storage'
  import dateTime from '../../../packages/core/utils/dateTime'
  import formatter from '../../../packages/core/utils/formatter'
  
  export default {
    private: {
      historyItems: [],
      isLoading: true,
      page: 1,
      pageSize: 20,
      hasMore: true
    },
    onInit() {
      this.loadHistory()
    },
    onShow() {
      // 每次页面显示时刷新数据
      this.refreshHistory()
    },
    loadHistory() {
      this.isLoading = true
      
      // 等待数据库初始化完成后再加载数据
      if (global.dbInitPromise) {
        global.dbInitPromise
          .then(() => {
            return getHistoryList(this.page, this.pageSize)
          })
          .then(result => {
            if (result.items.length < this.pageSize) {
              this.hasMore = false
            }
            
            // 追加新数据
            if (this.page === 1) {
              this.historyItems = result.items
            } else {
              this.historyItems = this.historyItems.concat(result.items)
            }
            
            this.isLoading = false
          })
          .catch(err => {
            this.$app.$def.showToast('加载失败: ' + err.message)
            this.isLoading = false
          })
      } else {
        // 如果dbInitPromise不存在，可能是因为全局变量设置错误
        console.error('数据库初始化Promise不存在')
        this.$app.$def.showToast('数据库初始化异常')
        this.isLoading = false
      }
    },
    refreshHistory() {
      this.page = 1
      this.hasMore = true
      this.loadHistory()
    },
    loadMore() {
      if (this.hasMore && !this.isLoading) {
        this.page++
        this.loadHistory()
      }
    },
    formatDate(timestamp) {
      return dateTime.formatDate(timestamp, 'YYYY-MM-DD')
    },
    formatDuration(seconds) {
      return formatter.formatDuration(seconds)
    },
    viewDetail(id) {
      // 跳转到详情页面
      this.$app.$def.router.push({
        uri: 'pages/Report',
        params: {
          id: id
        }
      })
    }
  }
</script>

<style>
  .history-container {
    flex-direction: column;
    width: 100%;
    height: 100%;
  }
  
  .history-header {
    padding: 20px;
    align-items: center;
  }
  
  .history-title {
    font-size: 22px;
    font-weight: bold;
    color: #333333;
  }
  
  .history-list {
    flex: 1;
    width: 100%;
  }
  
  .history-item {
    padding: 16px;
    border-bottom: 1px solid #EEEEEE;
  }
  
  .item-content {
    flex-direction: column;
    width: 100%;
  }
  
  .item-header {
    flex-direction: row;
    justify-content: space-between;
    margin-bottom: 10px;
  }
  
  .item-date {
    font-size: 16px;
    font-weight: bold;
    color: #333333;
  }
  
  .item-duration {
    font-size: 14px;
    color: #666666;
  }
  
  .item-stats {
    flex-direction: column;
  }
  
  .stat-row {
    flex-direction: row;
    justify-content: space-between;
    margin-bottom: 4px;
  }
  
  .stat-name {
    font-size: 14px;
    color: #666666;
  }
  
  .stat-value {
    font-size: 14px;
    color: #333333;
    font-weight: 500;
  }
  
  .loading-item {
    height: 80px;
    justify-content: center;
    align-items: center;
  }
  
  .loading-indicator {
    height: 80px;
    justify-content: center;
    align-items: center;
  }
  
  .empty-item {
    height: 200px;
    justify-content: center;
    align-items: center;
  }
  
  .empty-state {
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  
  .empty-text {
    font-size: 16px;
    color: #999999;
  }
</style> 