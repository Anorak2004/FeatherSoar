
 /**
 * @desc 控制台输出信息
 * @version 1
 */
declare const console: {
  /**
   * @desc 打印debug信息。
   * @param {message} 打印debug信息入参 {string}
   * @param {arguments} 打印debug信息入参 {any[]}
   * @version 1
   */
    debug(message: string, ...arguments: any[]): void
    /**
     * @desc 打印log信息。
     * @param {message} 打印log信息入参 {string}
     * @param {arguments} 打印log信息入参 {any[]}
     * @version 1
     */
    log(message: string, ...arguments: any[]): void
    /**
     * @desc 打印info信息。
     * @param {message} 打印info信息入参 {string}
     * @param {arguments} 打印info信息入参 {any[]}
     * @version 1
     */
    info(message: string, ...arguments: any[]): void
     /**
     * @desc 打印warn信息。
     * @param {message} 打印warn信息入参 {string}
     * @param {arguments} 打印warn信息入参 {any[]}
     * @version 1
     */
    warn(message: string, ...arguments: any[]): void;
    /**
     * @desc 打印error信息。
     * @param {message} 打印error信息入参 {string}
     * @param {arguments} 打印error信息入参 {any[]}
     * @version 1
     */
    error(message: string, ...arguments: any[]): void;
}

/**
 * @desc 定时器。
 * @param {handler} 函数入参 {function}
 * @param {delay} 时间入参 {number}
 * @param {arguments} 其他入参 { any[]}
 * @version 1
 * @returns 返回定时器的id {number}
 */
declare function setTimeout(handler: Function | string, delay?: number, ...arguments: any[]): number;

/**
 * @desc 定时器。
 * @param {handler} 函数入参 {function}
 * @param {delay} 时间入参 {number}
 * @param {arguments} 其他入参 { any[]}
 * @version 1
 * @returns 返回定时器的id {number}
 */
declare function setInterval(handler: Function | string, delay: number, ...arguments: any[]): number;



/**
 * @desc 转成数字。
 * @param {value} 入参 {any}
 * @version 1
 * @returns 返回数字{number}
 */
declare function Number(value: any): number;


/**
 * @desc 转成字符串。
 * @param {value} 入参 {any}
 * @version 1
 * @returns 返回数字{string}
 */
declare function String(value: any): string;


 /**
 * @desc 清除setInterval()产生的定时器。
 * @param {intervalID} 定时器入参 {number}
 * @version 1
 */
 declare function clearInterval(intervalID?: number): void;

 /**
 * @desc 清除setTimeout()产生的定时器。
 * @param {timeoutID} 定时器入参 {number}
 * @version 1
 */
declare function clearTimeout(timeoutID?: number): void;


 /**
 * @desc 数字工具函数
 * @version 1
 */
declare const Math: {
    abs(x: number): number;
    acos(x: number): number;
    acosh(x: number): number;
    asin(x: number): number;
    asinh(x: number): number;
    atan(x: number): number;
    atan2(y: number, x: number): number;
    atanh(x: number): number;
    cbrt(x: number): number;
    ceil(x: number): number;
    clz32(x: number): number;
    cos(x: number): number;
    cosh(x: number): number;
    exp(x: number): number;
    expm1(x: number): number;
    floor(x: number): number;
    fround(x: number): number;
    hypot(...values: number[]): number;
    imul(a: number, b: number): number;
    log(x: number): number;
    log1p(x: number): number;
    log10(x: number): number;
    log2(x: number): number;
    max(...values: number[]): number;
    min(...values: number[]): number;
    pow(base: number, exponent: number): number;
    random(): number;
    round(x: number): number;
    sign(x: number): number;
    sin(x: number): number;
    sinh(x: number): number;
    sqrt(x: number): number;
    tan(x: number): number;
    tanh(x: number): number;
    trunc(x: number): number;
}


/**
 * @desc 扩展原始的 string 类型
 * @version 1
 */
interface String {
  
  /**
 * @desc 字符串长度length
 * @version 1
 */
  readonly length: number;

 /**
 * @desc 转字符串
 * @version 1
 * @returns {string}
 */
  toString(): string;

/**
 * @desc 获取字符串某个位置返回字符
 * @version 1
 * @returns {string}
 */
  charAt(pos: number): string;

 /**
 * @desc 获取字符串某个位置返回字符的编码
 * @version 1
 * @returns {number}
 */
  charCodeAt(index: number): number;

/**
 * @desc 字符串拼接
 * @version 1
 * @returns {string}
 */
  concat(...strings: string[]): string;

/**
 * @desc 字符串位置
 * @version 1
 * @returns {number}
 */
  indexOf(searchString: string, position?: number): number;

  /**
 * @desc 字符串最后位置
 * @version 1
 * @returns {number}
 */
  lastIndexOf(searchString: string, position?: number): number;

/**
 * @desc 字符串比较
 * @version 1
 * @returns {number}
 */
  /** Determines whether two strings are equivalent in the current locale. */
  localeCompare(that: string): number;

/**
 * @desc 字符串匹配
 * @version 1
 * @returns {RegExpMatchArray | null}
 */
  match(regexp: string | RegExp): RegExpMatchArray | null;

  /**
 * @desc 字符串替换
 * @version 1
 * @returns {string}
 */
  replace(searchValue: string | RegExp, replaceValue: string): string;
/**
 * @desc 字符串替换
 * @version 1
 * @returns {string}
 */
  replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;

 /**
 * @desc 字符串搜索
 * @version 1
 * @returns {number}
 */
  search(regexp: string | RegExp): number;

/**
 * @desc 字符串截取
 * @version 1
 * @returns {number}
 */
  slice(start?: number, end?: number): string;

/**
 * @desc 字符串分割
 * @version 1
 * @returns {string[]}
 */
  split(separator: string | RegExp, limit?: number): string[];

/**
 * @desc 字符串截取
 * @version 1
 * @returns {string}
 */
  substring(start: number, end?: number): string;

/**
 * @desc 字符串转小写
 * @version 1
 * @returns {string}
 */
  toLowerCase(): string;

/**
 * @desc 将字符串转换为小写，并根据宿主环境的语言环境进行适当的区域设置转换
 * @version 1
 * @returns {string}
 */
  toLocaleLowerCase(locales?: string | string[]): string;

/**
 * @desc 字符串转大写
 * @version 1
 * @returns {string}
 */
  toUpperCase(): string;

  /**
 * @desc 将字符串转换为大写，并根据宿主环境的语言环境进行适当的区域设置转换
 * @version 1
 * @returns {string}
 */
  toLocaleUpperCase(locales?: string | string[]): string;

/**
 * @desc 去除字符串两边的空格
 * @version 1
 * @returns {string}
 */
  trim(): string;

 /**
 * @desc 返回字符串的原始值
 * @version 1
 * @returns {string}
 */
  valueOf(): string;

/**
 * @desc 返回字符串指定位置的字符
 * @version 1
 * @returns {string | undefined}
 */
  at(index: number): string | undefined;

  /**
 * @desc 判断字符串是否以searchString开头
 * @version 1
 * @returns {boolean}
 */
  startsWith(searchString: string, position?: number): boolean;

/**
 * @desc 判断字符串是否以searchString结尾
 * @version 1
 * @returns {boolean}
 */
  endsWith(searchString: string, endPosition?: number): boolean;

  /**
 * @desc 判断字符串是否包含searchString
 * @version 1
 * @returns {boolean}
 */
  includes(searchString: string, position?: number): boolean;

  /**
 * @desc 在字符串的开头填充字符串
 * @version 1
 * @returns {string}
 */
  padStart(maxLength: number, fillString?: string): string;


  /**
 * @desc 在字符串的末尾填充字符串
 * @version 1
 * @returns {string}
 */
  padEnd(maxLength: number, fillString?: string): string;


  /**
 * @desc 重复字符串
 * @version 1
 * @returns {string}
 */
  repeat(count: number): string;

  /**
 * @desc 去除字符串末尾的空格
 * @version 1
 * @returns {string}
 */
  trimEnd(): string;

  /**
 * @desc 去除字符串开头的空格
 * @version 1
 * @returns {string}
 */
  trimStart(): string;

  /**
 * @desc 去除字符串开头的空格
 * @version 1
 * @returns {string}
 */
  trimLeft(): string;

  /**
 * @desc 去除字符串末尾的空格
 * @version 1
 * @returns {string}
 */
  trimRight(): string;
}


 /**
 * Date时间
 */
declare class Date {
/**
 * @desc Date无参构造函数
 * @version 1
 */
  constructor();
/**
 * @desc Date有参构造函数
 * @param {value} 构造函数入参 {number | string | Date}
 * @version 1
 */
  constructor(value: number | string | Date);
  /**
 * @desc Date有参构造函数
 * @param {year} 构造函数入参 {number}
 * @param {month} 构造函数入参 {number}
 * @param {day} 构造函数入参 {number}
 * @param {hour} 构造函数入参 {number}
 * @param {minute} 构造函数入参 {number}
 * @param {second} 构造函数入参 {number}
 *  @param {millisecond} 构造函数入参 {number}
 * @version 1
 */
  constructor(year: number, month: number, day?: number, hour?: number, minute?: number, second?: number, millisecond?: number);
/**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {string}
 */
  toString(): string;
  /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {string}
 */
  toDateString(): string;
  /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {string}
 */
  toTimeString(): string;
  /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {string}
 */
  toLocaleString(): string;
  /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {string}
 */
  toLocaleDateString(): string;
  /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {string}
 */
  toLocaleTimeString(): string;
  /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  valueOf(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getTime(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getFullYear(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getUTCFullYear(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getMonth(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getUTCMonth(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getDate(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getUTCDate(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getDay(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getUTCDay(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getHours(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getUTCHours(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getMinutes(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getUTCMinutes(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getSeconds(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getUTCSeconds(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getMilliseconds(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getUTCMilliseconds(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  getTimezoneOffset(): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setTime(time: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setMilliseconds(ms: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setUTCMilliseconds(ms: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setSeconds(sec: number, ms?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setUTCSeconds(sec: number, ms?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setMinutes(min: number, sec?: number, ms?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setUTCMinutes(min: number, sec?: number, ms?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setHours(hours: number, min?: number, sec?: number, ms?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setDate(date: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setUTCDate(date: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setMonth(month: number, date?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setUTCMonth(month: number, date?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setFullYear(year: number, month?: number, date?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  setUTCFullYear(year: number, month?: number, date?: number): number;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  toUTCString(): string;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  toISOString(): string;
   /**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
  toJSON(key?: any): string;
/**
 * @desc Date 对象的方法和属性
 * @version 1
 * @returns {number}
 */
   /**
 * @desc Date 对象的静态方法
 * @version 1
 * @returns {number}
 */
  static now(): number;
   /**
 * @desc Date 对象的静态方法
 * @version 1
 * @returns {number}
 */
  static parse(s: string): number;
   /**
 * @desc Date 对象的静态方法
 * @version 1
 * @returns {number}
 */
  static UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;
}


 /**
 * @desc Object对象具备的方法
 * @version 1
 */	
declare class Object {

   /**
   * @desc Object对象的构造函数
   * @version 1
   */	
    constructor(value?: any);

   /**
     * @desc Object对象实例方法
     * @version 1
     */
    toString(): string;
    /**
     * @desc Object对象实例方法
     * @version 1
     */
    toLocaleString(): string;
    /**
     * @desc Object对象实例方法
     * @version 1
     */  
    valueOf(): Object;
    /**
     * @desc Object对象实例方法
     * @version 1
     */
    hasOwnProperty(v: PropertyKey): boolean;
    /**
     * @desc Object对象实例方法
     * @version 1
     */
    isPrototypeOf(v: Object): boolean;
    /**
     * @desc Object对象实例方法
     * @version 1
     */
    propertyIsEnumerable(v: PropertyKey): boolean;
    /**
     * @desc Object对象实例方法
     * @version 1
     */
    [Symbol.toPrimitive](hint: "string" | "number"): string | number;
    /**
     * @desc Object对象属性
     * @version 1
     */
    [Symbol.toStringTag]: string;
     /**
     * @desc Object对象静态方法
     * @version 1
     */
    static assign(target: any, ...sources: any[]): any;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static create(o: object | null, properties?: PropertyDescriptorMap): any;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static defineProperties(o: any, properties: PropertyDescriptorMap): any;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static defineProperty(o: any, p: PropertyKey, attributes: PropertyDescriptor): any;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static entries(o: any): [string, any][];
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static freeze<T>(o: T): Readonly<T>;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static fromEntries(entries: Iterable<readonly any[]>): any;
   /**
     * @desc Object对象静态方法
     * @version 1
     */
    static getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static getOwnPropertyDescriptors(o: any): PropertyDescriptorMap;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static getOwnPropertyNames(o: any): string[];
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static getOwnPropertySymbols(o: any): symbol[];
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static getPrototypeOf(o: any): any;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static is(value1: any, value2: any): boolean;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static isExtensible(o: any): boolean;
   /**
     * @desc Object对象静态方法
     * @version 1
     */
    static isFrozen(o: any): boolean;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static isSealed(o: any): boolean;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static keys(o: any): string[];
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static preventExtensions<T>(o: T): T;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static seal<T>(o: T): T;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static setPrototypeOf(o: any, proto: any): any;
    /**
     * @desc Object对象静态方法
     * @version 1
     */
    static values(o: any): any[];
}

 /**
 * @desc JSON对象具备的方法
 * @version 1
 */
declare const JSON:{
  /**
   * @desc 把json字符串解析成js对象
   * @version 1
   */
   parse(jsonString: string): any;
   /**
   * @desc 把传入的值变成字符串
   * @version 1
   */
   stringify(value: any): string;
}



declare class Uint8Array {


  // 静态方法
  static from(arrayLike: ArrayLike<number>): Uint8Array;
  static of(...items: number[]): Uint8Array;

  constructor(value?: any);

  // 属性
  readonly length: number;
  readonly BYTES_PER_ELEMENT: number;
  [index: number]: number;

  // 方法
  copyWithin(target: number, start: number, end?: number): Uint8Array;
  every(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;
  fill(value: number, start?: number, end?: number): Uint8Array;
  find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
  findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
  forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
  includes(searchElement: number, fromIndex?: number): boolean;
  indexOf(searchElement: number, fromIndex?: number): number;
  join(separator?: string): string;
  keys(): IterableIterator<number>;
  lastIndexOf(searchElement: number, fromIndex?: number): number;
  map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
  reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
  reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
  reverse(): Uint8Array;
  set(array: ArrayLike<number>, offset?: number): void;
  slice(start?: number, end?: number): Uint8Array;
  some(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;
  sort(compareFn?: (a: number, b: number) => number): Uint8Array;
  subarray(begin?: number, end?: number): Uint8Array;
  values(): IterableIterator<number>;
}


declare const Array:typeof Array;


declare const Promise: typeof Promise;

